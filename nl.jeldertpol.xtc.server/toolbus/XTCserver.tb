process XTC is
	printf("TB: script is up and running...\n") .

	let
		Server : server,
		Client : client,
		Cid : int
	in
		(
			rec-connect(Server?)
			. printf("TB: XTC server connected...\n")
		)
		.
		(
			(
				rec-connect(Client?)
				. printf("TB: XTC client connected...\n")
				. create(XTCclient(Client, Server), Cid?)
			) * delta
		)
	endlet

// There is only one server, so now we can send directly to the server
process XTCclient(Client : client, Server : server) is
	printf("client\n") .
	
	let
		NicknameCheck : str	// Used so changes are not send to client itself.
	in
		(
			(
				// Get current sessions
				let
					Sessions : blob
				in
					rec-request(Client, getSessions())
					. snd-eval(Server, getSessions())
					. rec-value(Server, getSessions(Sessions?))
					. snd-response(Client, getSessions(Sessions))
				endlet
			)
			+
			(
				// Start a new session
				let
					Project : str,
					Revision : term,
					Nickname : str,
					Success : bool
				in
					rec-request(Client, startSession(Project?, Revision?, Nickname?))
					. snd-eval(Server, startSession(Project, Revision, Nickname))
					. rec-value(Server, startSession(Success?))
					. NicknameCheck := Nickname
					. subscribe(change(<str>, <term>, <str>))	// Project, Change, Nickname
					. subscribe(chat(<str>, <str>))	// Nickname, Message
					. snd-response(Client, startSession(Success))
				endlet
			)
			+
			(
				// Join an existing session
				let
					Project : str,
					Nickname : str,
					Success : bool
				in
					rec-request(Client, joinSession(Project?, Nickname?))
					. snd-eval(Server, joinSession(Project, Nickname))
					. rec-value(Server, joinSession(Success?))
					. NicknameCheck := Nickname
					. subscribe(change(<str>, <term>, <str>))	// Project, Change, Nickname
					. subscribe(chat(<str>, <str>))	// Nickname, Message
					. snd-response(Client, joinSession(Success))
				endlet
			)
			+
			(
				// Request changes in session
				let
					Project : str,
					Changes : blob
				in
					rec-request(Client, requestChanges(Project?))
					. snd-eval(Server, requestChanges(Project))
					. rec-value(Server, requestChanges(Changes?))
					. snd-response(Client, requestChanges(Changes))
				endlet
			)
			+
			(
				// Request textual changes of resource
				let
					Project : str,
					Resource : str,
					Changes : blob
				in
					rec-request(Client, requestTextualChanges(Project?, Resource?))
					. snd-eval(Server, requestTextualChanges(Project, Resource))
					. rec-value(Server, requestTextualChanges(Changes?))
					. snd-response(Client, requestTextualChanges(Changes))
				endlet
			)
			+
			(
				// Leave a session
				let
					Project : str,
					Nickname : str,
					Success : bool
				in
					rec-request(Client, leaveSession(Project?, Nickname?))
					. snd-eval(Server, leaveSession(Project, Nickname))
					. rec-value(Server, leaveSession(Success?))
					. unsubscribe(change(<str>, <term>, <str>))	// Project, Change, Nickname
					. snd-response(Client, leaveSession(Success))
				endlet
			)
			+
			(
				// Send a change
				let
					Project : str,
					Change : blob,
					Nickname : str,
					Success : bool
				in
					rec-request(Client, sendChange(Project?, Change?, Nickname?))
					. snd-eval(Server, sendChange(Project, Change, Nickname))
					. rec-value(Server, sendChange(Success?))
					. snd-response(Client, sendChange(Success))
					. snd-note(change(Project, Change, Nickname))
				endlet
			)
			+
			(
				// Receive a change
				let
					Project : str,
					Change : blob,
					Nickname : str
				in
					rec-note(change(Project?, Change?, Nickname?))
					. if not-equal(NicknameCheck, Nickname) then
						snd-do(Client, receiveChange(Project, Change, Nickname))
					else
						tau
					fi
				endlet
			)
			+
			(
				// Send a chat message
				let
					Nickname : str,
					Message : str
				in
					rec-event(Client, sendChat(Nickname?, Message?))
					. snd-note(chat(Nickname, Message))
					.snd-ack-event(Client, sendChat(Nickname, Message))
				endlet
			)
			+
			(
				// Receive a chat message
				let
					Nickname : str,
					Message : str
				in
					rec-note(chat(Nickname?, Message?))
					. snd-do(Client, receiveChat(Nickname, Message))
				endlet
			)
		)
		*
		rec-disconnect(Client)
	endlet

tool server is {}
tool client is {}

toolbus(XTC)
